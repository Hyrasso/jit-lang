
start: module

module: block

block: _NEW_LINE? statement+

statement: expression _NEW_LINE+
         | var_declaration 
         | var_assignment 
         // | named_block
         | if_statement
         | while_statement

// named_block: IDENT ":" _NEW_LINE _INDENT block _DEDENT

if_statement: "if" expression ":" _NEW_LINE  _INDENT block _DEDENT ("else" ":" _NEW_LINE _INDENT block _DEDENT)?
while_statement: "while" expression ":" _NEW_LINE _INDENT block _DEDENT

typ: identifier
   | function_type
   | struct_type
    // | expression

typed_ident: identifier ":" typ

// the lvalue is an identifier for now
var_declaration: identifier ":" typ _NEW_LINE
               | var_declaration_and_assignement


var_declaration_and_assignement: identifier ":" typ? "=" expression _NEW_LINE
                               | identifier ":" typ? "=" func_declare


// eventually the left value will have other possibilities that an identifier, eg: a[1] = 2
var_assignment: identifier "=" expression _NEW_LINE
              | identifier "=" func_declare

// probably not the best way to do it, but is used to identify the return type of a function vs the arguments

ret_typ: typ

function_type: "fn" "(" _list{typ, ","}? ")" ret_typ?

func_declare : "fn" "(" _list{typed_ident, ","}?  ")" ret_typ? ":" _NEW_LINE _INDENT block _DEDENT

func_call: identifier "(" _list{expression, ","}? ")"

struct_type: "{" _list{typed_ident, ","} "}"

struct_member: identifier ":" expression

struct_value: "{" _list{struct_member, ","} "}"

expression: prec_1

_list{x, sep} : x (sep x)*

inline_func_declare: "fn" "(" _list{typed_ident, ","}?  ")" ret_typ? ":" expression

// logic
?prec_1: prec_2 (prec_1_op prec_2)*
// add/sub
?prec_2: prec_3 (prec_2_op prec_3)*
// mul/div
?prec_3: base (prec_3_op base)*
?base: DECIMAL_NUMBER                -> number
     | identifier
     | func_call
     | struct_value
     | inline_func_declare
     | "(" expression ")"

// from lowest to higher precedence
?prec_1_op: GT | GTE | LT | LTE | EQ | NEQ
?prec_2_op: PLUS | MINUS
?prec_3_op: ASTERISK | SLASH

GT: ">"
LT: "<"
EQ: "=="
GTE: ">="
LTE: "<="
NEQ: "!="

ASTERISK: "*"
SLASH: "/"
PLUS: "+"
MINUS: "-"

// Any char that is not a white space and that is 
identifier: /[^\W\d]\w*/u

DIGIT: "0".."9"
DECIMAL_NUMBER: DIGIT+

IGNORED_SPACES: " " | /\t/
%ignore IGNORED_SPACES

CR : /\r/
LF : /\n/
// LINE_INDENT is part of _NEW_LINE to add _INDENT/_DEDENT token with post lexing
LINE_INDENT: /[\t ]*/
_NEW_LINE: (CR? LF LINE_INDENT?)+

COMMENT: /#[^\n]*\n+/
%ignore COMMENT

%declare _INDENT _DEDENT
