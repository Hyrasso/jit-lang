s: {a: u64, b: u64}

s = {a: 1, b: 2}

a : u64 = s.a
b : u64 = s.b + 3

s2: {a: u64, b: u64} = {a: s.a, b: s.b * 4}

pair : struct = {left: u64, right: u64}

p: pair = { left: 1, right: 2 }

f : fn({a: u64, b: u64}) {left: u64, right: u64}
f = fn(x: {a: u64, b: u64}) {left: u64, right: u64} :
    {left: x.a + 3, right: x.b + 9}


res : pair = f({a: s.a, b: s.b}) 
print(res.right)
print(res.left)

# wait for type inference to work
# g : = fn(s: {l: u64, r: u64}):
#     pass

# nested structs

outer_s : {p: {left: u64, right: u64}, c: u64} = {p: {left: 0, right: 42}, c: 4}
print(outer_s.p.right)
