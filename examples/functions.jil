fn ( y: u64 ) u64 : 3 * 2

f1: fn(u64) u64 = fn ( x: u64 ) u64 : x+1

f2: fn(u64, u64) u64 = fn (a: u64, b: u64) u64:
    inner_f: fn(u64)u64 = fn(x: u64) u64:
        a + x
    f1(a) + b * 2 - inner_f(0)

# 4
print(f1(3))

# 11
print(f2(7, 5))

# type inference not implemented in the interpreter yet
# infered_type_f := fn(a: u64) u64:
#     a

no_arg_func : fn() u64 = fn() u64:
    1
print(no_arg_func())

no_return_func : fn(u64) = fn(x: u64):
    x
no_return_func(1)

nothing_func : fn() = fn():
    3
nothing_func()

# first class functions
apply: fn(fn(u64) u64, u64) u64 = fn(f: fn(u64) u64, val: u64) u64:
    f(val)

print(apply(f1, 1))
